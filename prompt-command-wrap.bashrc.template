# prompt-command-wrap.bashrc
# vim: filetype=sh :

__do_define_pcwrap=false
type -t __pcwrap_ver >/dev/null && {
    [[ $(__pcwrap_ver) -lt <PcwrapVer> ]] && {
        __do_define_pcwrap=true
    }
} || {
    # __pcwrap_ver doesn't exist
    __do_define_pcwrap=true
}

$__do_define_pcwrap && {
    __pcwrap_ver() {
        builtin echo <PcwrapVer>
    }
    [[ -z ${__pcwrap_items+x} ]] && {
        # __pcwrap_items is not yet defined
        builtin declare -a __pcwrap_items
    }
    __pcwrap_is_registered() {
        # Return fail if $1 is not registered in __pcwrap_items
        local item
        for item in ${__pcwrap_items[@]}; do
            [[ "${item}" == "$1" ]] && {
                return
            }
        done
        false
    }
    __pcwrap_capture_existing_prompt_command() {
        [[ -z $PROMPT_COMMAND ]] && return
        [[ "$PROMPT_COMMAND" == __pcwrap_run ]] || {
            local funcId=__pcwrap_synth_${RANDOM}
            eval "$funcId() { \
                $PROMPT_COMMAND ;\
                };"
            __pcwrap_items+=("$funcId")
            PROMPT_COMMAND=__pcwrap_run
        }
    }

    __pcwrap_register() {
        # Register one or more PROMPT_COMMAND functions into __pcwrap_items
        __pcwrap_capture_existing_prompt_command
        while [[ -n $1 ]]; do
            __pcwrap_is_registered "$1" || {
                __pcwrap_items+=("$1")
            }
            shift
        done
    }
    __pcwrap_state() {
        # Debug tool
        echo "Items: ${__pcwrap_items[@]}" >&2
        echo "PROMPT_COMMAND=[$PROMPT_COMMAND]" >&2
    }
    __pcwrap_run() {
        local item
        for item in ${__pcwrap_items[@]}; do
            [[ "$(type -t $item)" == function ]] && {
                $item
            }
            true
        done
    }
    __pcwrap_clear() {
        unset __pcwrap_items;
        declare -a __pcwrap_items;
    }
}
